// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(PcShopDbContext))]
    [Migration("20250207222428_ChangeProductModel")]
    partial class ChangeProductModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CartEntityProductEntity", b =>
                {
                    b.Property<Guid>("CartEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("CartEntityId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CartEntityProductEntity");
                });

            modelBuilder.Entity("CategoryEntityCharacteristicPatternEntity", b =>
                {
                    b.Property<Guid>("CategoryEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicPatternsId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoryEntityId", "CharacteristicPatternsId");

                    b.HasIndex("CharacteristicPatternsId");

                    b.ToTable("CategoryEntityCharacteristicPatternEntity");
                });

            modelBuilder.Entity("CategoryEntityProductEntity", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryEntityProductEntity");
                });

            modelBuilder.Entity("CharacteristicRealizationEntityProductEntity", b =>
                {
                    b.Property<Guid>("CharacteristicsRealizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("CharacteristicsRealizationId", "ProductEntityId");

                    b.HasIndex("ProductEntityId");

                    b.ToTable("CharacteristicRealizationEntityProductEntity");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CartTotalPrice")
                        .HasColumnType("numeric");

                    b.Property<float>("CartTotalWeight")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Characteristic.CharacteristicPatternEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("CharacteristicPatterns");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Characteristic.CharacteristicRealizationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicPatternId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicPatternId")
                        .IsUnique();

                    b.ToTable("CharacteristicRealizing");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool>("StockAvailability")
                        .HasColumnType("boolean");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("WalletBalance")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("Login");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CartEntityProductEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.CartEntity", null)
                        .WithMany()
                        .HasForeignKey("CartEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryEntityCharacteristicPatternEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Characteristic.CharacteristicPatternEntity", null)
                        .WithMany()
                        .HasForeignKey("CharacteristicPatternsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryEntityProductEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacteristicRealizationEntityProductEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Characteristic.CharacteristicRealizationEntity", null)
                        .WithMany()
                        .HasForeignKey("CharacteristicsRealizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CartEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.UserEntity", "User")
                        .WithOne("Cart")
                        .HasForeignKey("DataAccessLayer.Entities.CartEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Characteristic.CharacteristicRealizationEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Characteristic.CharacteristicPatternEntity", "CharacteristicPattern")
                        .WithOne()
                        .HasForeignKey("DataAccessLayer.Entities.Characteristic.CharacteristicRealizationEntity", "CharacteristicPatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacteristicPattern");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserEntity", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
